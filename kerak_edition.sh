#!/bin/bash
export LC_NUMERIC="en_US.UTF-8"
URL=$HOME/solana_bot
source $URL/my_settings.sh
declare -a BALANCE_BY_INDEX

getBalance() {
    local publicKey=$1
    local apiUrl=${2:-"$API_URL"}
    local balanceTemp
    local finalBalance
    local retryCount=0

    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å. –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å –Ω—É–ª–µ–≤–æ–π - –ø–æ–≤—Ç–æ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑.
    while true; do
        balanceTemp=$(curl --silent -X POST "$apiUrl" -H 'Content-Type: application/json' -d '{"jsonrpc":"2.0", "id":1, "method":"getBalance", "params":["'"$publicKey"'"]}' | jq '.result.value')

        # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –±–æ–ª–µ–µ 0 –∏–ª–∏ –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞.
        if [[ $balanceTemp -gt 0 || $retryCount -ge 1 ]]; then
            break
        fi

        ((retryCount++))
        sleep 1
    done

    # –û–∫—Ä—É–≥–ª—è–µ–º –±–∞–ª–∞–Ω—Å –¥–æ –¥–≤—É—Ö –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ–º –≤ SOL (–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ 10^9)
    finalBalance=$(echo "scale=2; $balanceTemp/1000000000" | bc)

    # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ–¥—É—â–∏–π –Ω–æ–ª—å, –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ç–æ—á–∫–∏.
    if [[ $finalBalance == .* ]]; then
        finalBalance="0$finalBalance"
    fi

    echo "$finalBalance"
}

sendTelegramMessage() {
    local messageText=$1
    local isAlarm=${2:-0}       # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–≤–æ–∂–Ω–æ–µ.
    local chatId="$CHAT_ID_LOG" # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ª–æ–≥–∏—Ä—É—é—â–∏–π —á–∞—Ç

    if [[ $isAlarm -ne 0 ]]; then
        chatId="$CHAT_ID_ALARM" # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω —Ñ–ª–∞–≥ —Ç—Ä–µ–≤–æ–≥–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç
    fi

    # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ Telegram API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.
    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è BOT_TOKEN —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞.
    curl --silent --header 'Content-Type: application/json' \
        --request 'POST' \
        --data '{"chat_id":"'"$chatId"'","text":"'"$messageText"'","parse_mode":"HTML"}' \
        "https://api.telegram.org/bot$BOT_TOKEN/sendMessage" >/dev/null
}

SendTelegramAllertMessage() {
    sendTelegramMessage "$1" 1
}

# –§–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å, g—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å  –≤–æ–≤—Ä–µ–º—è
(sleep 90 && if ps -p $$ >/dev/null; then
    SendTelegramAllertMessage "–°–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–¥–≤–∏—Å. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ"
    kill -SIGINT $$
fi) &
# –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
TIMER_PID=$!

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è (INT), —á—Ç–æ–±—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ñ–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å
trap 'kill $TIMER_PID; exit' INT

echo -e
date

if [[ $CLUSTER == m ]]; then
    CLUSTER_NAME="Mainnet"

else
    CLUSTER_NAME="Testnet"
fi

$SOLANA_PATH validators -u$CLUSTER --output json-compact >$URL/delinq$CLUSTER.txt

checkPingDeliquent() {
    REPORT="–û–±—â–∏–π –æ—Ç—á–µ—Ç "
    for index in ${!PUB_KEY[*]}; do
        WARN=0
        PING=$(ping -c 4 ${IP[$index]} | grep transmitted | awk '{print $4}')
        DELINQUENT=$(cat $URL/delinq$CLUSTER.txt | jq '.validators[] | select(.identityPubkey == "'"${PUB_KEY[$index]}"'" ) | .delinquent ')

        if [[ $PING -eq 0 ]]; then
            MESSAGE+=" Ping –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç!!\n"
            WARN=1
        fi

        if [[ $DELINQUENT == true ]]; then
            MESSAGE+=" –ù–æ–¥–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞—è (delinquent)!!\n"
            WARN=1
        fi

        if [[ WARN -eq 1 ]]; then
            MESSAGE="\nüî¥üî¥üî¥${MESSAGE}\n\n"
            SendTelegramAllertMessage "${MESSAGE}"
        else
            MESSAGE="\nüü¢${MESSAGE} –í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ!"
        fi
        REPORT+=$MESSAGE
    done
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    echo -e "$REPORT"
    sendTelegramMessage "$REPORT"
}

generate_node_report() {
    WARN=0
    ADDITIONAL_MESSAGE=""
    epochCredits=$(cat $URL/delinq$CLUSTER.txt | jq '.validators[] | select(.identityPubkey == "'"${PUBLIC_KEY}"'" ) | .epochCredits ')
    mesto_top=$(cat $URL/mesto_top$CLUSTER.txt | grep ${PUBLIC_KEY} | awk '{print $1}' | grep -oE "[0-9]*|[0-9]*.[0-9]")
    proc=$(bc <<<"scale=2; $epochCredits*100/$lider2")
    onboard=$(curl -s -X GET 'https://kyc-api.vercel.app/api/validators/list?search_term='"${PUBLIC_KEY}"'&limit=40&order_by=name&order=asc' | jq '.data[0].onboardingnumber')
    #dali blokov
    All_block=$(curl --silent -X POST ${API_URL} -H 'Content-Type: application/json' -d '{ "jsonrpc":"2.0","id":1, "method":"getLeaderSchedule", "params": [ null, { "identity": "'${PUB_KEY[$index]}'" }] }' | jq '.result."'${PUB_KEY[$index]}'"' | wc -l)
    All_block=$(echo "${All_block} -2" | bc)
    if (($(bc <<<"$All_block < 0"))); then
        All_block=0
    fi
    #done,sdelal,skipnul, skyp%
    BLOCKS_PRODUCTION_JSON=$(curl --silent -X POST ${API_URL} -H 'Content-Type: application/json' -d '{"jsonrpc":"2.0","id":1, "method":"getBlockProduction", "params": [{ "identity": "'${PUB_KEY[$index]}'" } ]}')
    Done=$(echo ${BLOCKS_PRODUCTION_JSON} | jq '.result.value.byIdentity."'${PUBLIC_KEY}'"[0]')
    if (($(bc <<<"$Done == null"))); then
        Done=0
    fi
    sdelal_blokov=$(echo ${BLOCKS_PRODUCTION_JSON} | jq '.result.value.byIdentity."'${PUBLIC_KEY}'"[1]')
    if [[ -z "$sdelal_blokov" ]]; then
        sdelal_blokov=0
    fi
    skipped=$(bc <<<"$Done - $sdelal_blokov")

    if [[ $Done -eq 0 ]]; then
        skip=0
    else
        skip=$(bc <<<"scale=2; $skipped*100/$Done")
    fi

    if [[ -z "$skip" ]]; then
        skip=0
    fi

    if (($(bc <<<"$skip <= $Average + $skip_dop"))); then
        skip=üü¢$skip
    else
        skip=üî¥$skip
    fi

    BALANCE=$(getBalance ${PUBLIC_KEY} "$API_URL")

    if (($(bc <<<"$BALANCE < ${BALANCEWARN[$index]}"))); then
        ADDITIONAL_MESSAGE+="üî¥üî¥üî¥–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å \n${PUBLIC_KEY}\n"
        WARN=1
    fi

    VOTE_BALANCE=$(getBalance ${VOTE[$index]} "$API_URL")

    RESPONSE_STAKES=$($SOLANA_PATH stakes ${VOTE[$index]} -u$CLUSTER --output json-compact)
    ACTIVE=$(echo "scale=2; $(echo $RESPONSE_STAKES | jq -c '.[] | .activeStake' | paste -sd+ | bc)/1000000000" | bc)
    ACTIVATING=$(echo "scale=2; $(echo $RESPONSE_STAKES | jq -c '.[] | .activatingStake' | paste -sd+ | bc)/1000000000" | bc)
    if (($(echo "$ACTIVATING > 0" | bc -l))); then
        ACTIVATING=$ACTIVATINGüü¢
    fi
    DEACTIVATING=$(echo "scale=2; $(echo $RESPONSE_STAKES | jq -c '.[] | .deactivatingStake' | paste -sd+ | bc)/1000000000" | bc)
    if (($(echo "$DEACTIVATING > 0" | bc -l))); then
        DEACTIVATING=$DEACTIVATING‚ö†Ô∏è
    fi

    VER=$(cat $URL/delinq$CLUSTER.txt | jq '.validators[] | select(.identityPubkey == "'"${PUBLIC_KEY}"'" ) | .version ' | sed 's/\"//g')

    local onboard_part=""
    if [[ -n $onboard && $onboard != "null" ]]; then
        onboard_part="<b>Onboard:</b> $onboard"
    fi

    echo "<b>${NODE_NAME[$index]} ${CLUSTER_NAME} nr ${index}</b> <b>$VER</b>:
${ADDITIONAL_MESSAGE}
${PUBLIC_KEY}
<code>
<b>Blocks</b> All: $All_block Done: $Done Skipped: $skipped
<b>Skip:</b> $skip% <b>Average:</b> $Average%
<b>Credits:</b> $epochCredits ($proc%)
<b>Position:</b> $mesto_top $onboard_part
<b>Stake</b> Active: $ACTIVE
Activating: $ACTIVATING
Deactivating: $DEACTIVATING
<b>Balance:</b> $BALANCE
<b>Vote Balance:</b> $VOTE_BALANCE
</code>"
}

checkBalancePingDeliquent

CURRENT_MIN=$(date +%M)
if ((10#$CURRENT_MIN < 2)); then

    mesto_top_temp=$($SOLANA_PATH validators -u$CLUSTER --sort=credits -r -n >"$URL/mesto_top$CLUSTER.txt")
    lider=$(cat $URL/mesto_top$CLUSTER.txt | sed -n 2,1p | awk '{print $3}')
    lider2=$(cat $URL/delinq$CLUSTER.txt | jq '.validators[] | select(.identityPubkey == "'"$lider"'") | .epochCredits ')
    Average=$(jq '.averageStakeWeightedSkipRate' "$URL/delinq$CLUSTER.txt" | xargs printf "%.2f")
    Average=${Average:-0}

    RESPONSE_EPOCH=$($SOLANA_PATH epoch-info -u$CLUSTER >"$URL/temp$CLUSTER.txt")
    EPOCH=$(awk '/Epoch:/ {print $2}' "$URL/temp$CLUSTER.txt")
    PREW_EPOCH=$EPOCH-1
    EPOCH_PERCENT=$(awk '/Epoch Completed Percent/ {print $4+0}' "$URL/temp$CLUSTER.txt" | xargs printf "%.2f%%")
    END_EPOCH=$(awk '/Epoch Completed Time/ {$1=$2=""; print $0}' "$URL/temp$CLUSTER.txt" | tr -d '()')

    for index in ${!PUB_KEY[*]}; do
        PUBLIC_KEY=PUB_KEY[$index]
        node_report=$(generate_node_report)

        echo "${node_report}"
        SendTelegramMessage "${node_report}" ${WARN}

        # –û–¥–∏–Ω —Ä–∞–∑  –≤ —Å—É—Ç–∫–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º
        if (($(echo "$(date +%H) == $TIME_Info2" | bc -l))); then

            $(curl -s -X GET 'https://kyc-api.vercel.app/api/validators/details?pk='"${PUBLIC_KEY}"'&epoch='"$PREW_EPOCH"'' | jq '.stats' >$URL/info2$CLUSTER.txt)

            state_action=$(cat $URL/info2$CLUSTER.txt | jq '.state_action' | sed 's/\"//g')
            asn=$(cat $URL/info2$CLUSTER.txt | jq '.epoch_data_center.asn')
            location=$(cat $URL/info2$CLUSTER.txt | jq '.epoch_data_center.location' | sed 's/\"//g')
            data_center_percent_temp=$(cat $URL/info2$CLUSTER.txt | grep "data_center_stake_percent" | awk '{print $2}' | sed 's/\,//g')
            data_center_percent=$(printf "%.2f" $data_center_percent_temp)
            reported_metrics_summar=$(cat $URL/info2$CLUSTER.txt | jq '.self_reported_metrics_summary.reason' | sed 's/\"//g')

            info2='"
<b>'"${NODE_NAME[$index]} epoch $PREW_EPOCH"'</b>['"$PUBLIC_KEY"'] <code>
*'$state_action' 
*'"$asn"' '"$location"' '"$data_center_percent"'%
*'"$reported_metrics_summar"'</code>"'
            if [[ $reported_metrics_summar != null ]]; then
                sendTelegramMessage "$info2"
                echo -e "\n"
            else
                echo "'"${TEXT_NODE2[$index]}"' Stake-o-matic –µ—â–µ –Ω–µ –æ—Ç—Ä–∞–±–æ—Ç–∞–ª. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç"
                sendTelegramMessage "${TEXT_NODE2[$index]} Stake-o-matic –µ—â–µ –Ω–µ –æ—Ç—Ä–∞–±–æ—Ç–∞–ª. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç"
            fi
        fi

    done

    EPOCH=$(cat $URL/temp$CLUSTER.txt | grep "Epoch:" | awk '{print $2}')
    echo "${CLUSTER_NAME} ${EPOCH}"

fi

kill $TIMER_PID
